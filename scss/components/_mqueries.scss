  /* Visibility Classes ---------------------- */
  /*                                           */
  /* Standard (large) display targeting */
  .show-for-small,
  .show-for-medium,
  .show-for-medium-down,
  .hide-for-large,
  .hide-for-large-up,
  .show-for-xlarge,
  .show-for-print { display: none !important; }

  .hide-for-small,
  .hide-for-medium,
  .hide-for-medium-down,
  .show-for-large,
  .show-for-large-up,
  .hide-for-xlarge,
  .hide-for-print { display: inherit !important; }

  /* Very large display targeting */
  @media only screen and (min-width: $screenXlarge) {
    .hide-for-small,
    .hide-for-medium,
    .hide-for-medium-down,
    .hide-for-large,
    .show-for-large-up,
    .show-for-xlarge { display: inherit !important; }

    .show-for-small,
    .show-for-medium,
    .show-for-medium-down,
    .show-for-large,
    .hide-for-large-up,
    .hide-for-xlarge { display: none !important; }
  }

  /* Medium display targeting */
  @media only screen and (max-width: $screenMedium) and (min-width: $screenSmall) {
    .hide-for-small,
    .show-for-medium,
    .show-for-medium-down,
    .hide-for-large,
    .hide-for-large-up,
    .hide-for-xlarge { display: inherit !important; }

    .show-for-small,
    .hide-for-medium,
    .hide-for-medium-down,
    .show-for-large,
    .show-for-large-up,
    .show-for-xlarge { display: none !important; }
  }

  /* Small display targeting */
  @media only screen and (max-width: $screenSmall - 1) {
    .show-for-small,
    .hide-for-medium,
    .show-for-medium-down,
    .hide-for-large,
    .hide-for-large-up,
    .hide-for-xlarge { display: inherit !important; }

    .hide-for-small,
    .show-for-medium,
    .hide-for-medium-down,
    .show-for-large,
    .show-for-large-up,
    .show-for-xlarge { display: none !important; }
  }

  /* Orientation targeting */
  .show-for-landscape,
  .hide-for-portrait { display: inherit !important; }
  .hide-for-landscape,
  .show-for-portrait { display: none !important; }

  @media screen and (orientation: landscape) {
    .show-for-landscape,
    .hide-for-portrait { display: inherit !important; }
    .hide-for-landscape,
    .show-for-portrait { display: none !important; }
  }

  @media screen and (orientation: portrait) {
    .show-for-portrait,
    .hide-for-landscape { display: inherit !important; }
    .hide-for-portrait,
    .show-for-landscape { display: none !important; }
  }

  /* Touch-enabled device targeting */
  .show-for-touch { display: none !important; }
  .hide-for-touch { display: inherit !important; }
  .touch .show-for-touch { display: inherit !important; }
  .touch .hide-for-touch { display: none !important; }

  /* Specific overrides for elements that require something other than display: block */

  table.show-for-xlarge,
  table.show-for-large,
  table.hide-for-small,
  table.hide-for-medium { display: table !important; }

  @media only screen and (max-width: $screenMedium) and (min-width: $screenSmall) {
    .touch table.hide-for-xlarge,
    .touch table.hide-for-large,
    .touch table.hide-for-small,
    .touch table.show-for-medium { display: table !important; }
  }

  @media only screen and (max-width: $screenSmall - 1) {
    table.hide-for-xlarge,
    table.hide-for-large,
    table.hide-for-medium,
    table.show-for-small { display: table !important; }
  }

  /* Covering almost all ----- */
  @media only screen and (max-device-width: 800px), only screen and (device-width: 1024px) and (device-height: 600px), only screen and (width: 1280px) and (orientation: landscape), only screen and (device-width: 800px), only screen and (max-width: 767px) {
    .flex-video { padding-top: 0; }
  }

  /* Small Devices ------------ */
  @media only screen and (max-width: $screenSmall - 1) {

    /* Global Misc --- */
    /*                 */
    .left, .right { float: none; }
    body { -webkit-text-size-adjust: none; -ms-text-size-adjust: none; width: 100%; min-width: 0; margin-#{$defaultFloat}: 0; margin-#{$defaultOpposite}: 0; padding-#{$defaultFloat}: 0; padding-#{$defaultOpposite}: 0; }

    /* The Grid --- */
    /*              */
    .row { width: auto; min-width: 0; margin-#{$defaultFloat}: 0; margin-#{$defaultOpposite}: 0; }
    .column, .columns { width: auto !important; float: none;}
    .content-block .column, .content-block .columns { padding:0; padding-bottom:25px; margin-bottom:25px; border-bottom:1px solid #c2c2c2; margin-left:15px; margin-right:15px;}
    .column:last-child, .columns:last-child { float: none; margin-bottom: 0; border-bottom:none;}
    [class*="column"] + [class*="column"]:last-child { float: none; }
    .column:before, .columns:before, .column:after, .columns:after { content:""; display:table; }
    .column:after, .columns:after { clear: both; }

    // Placeholder classes for mobile grid overrides
    %no-default-margin { margin-#{$defaultFloat}: 0 !important; }
    %default-auto { #{$defaultFloat}: auto; }
    %opposite-auto { #{$defaultOpposite}: auto; }

    @for $i from 1 through $totalColumns - 2 {
      .offset-by-#{convert-number-to-word($i)} { @extend %no-default-margin; }
    }
    @for $i from 2 through $totalColumns - 2 {
      .push-#{convert-number-to-word($i)} { @extend %default-auto; }
      .pull-#{convert-number-to-word($i)} { @extend %opposite-auto; }
    }

    /* Mobile 4-column Grid */
    @for $i from 1 through $mobileTotalColumns {
      .row {
        .mobile-#{convert-number-to-word($i)} { width: gridCalc($i, $mobileTotalColumns) !important; float: $defaultFloat; padding: 0 ($columnGutter/2);
          &:last-child { float: $defaultOpposite; }
          &.end { float: $defaultFloat; }
        }
        &.collapse {
          .mobile-#{convert-number-to-word($i)} { padding: 0; }
        }
      }
    }
    @for $i from 1 through $mobileTotalColumns - 1 {
      .push-#{convert-number-to-word($i)}-mobile { #{$defaultFloat}: gridCalc($i, $mobileTotalColumns); }
      .pull-#{convert-number-to-word($i)}-mobile { #{$defaultOpposite}: gridCalc($i, $mobileTotalColumns); }
    }

    /* Block Grids --- */
    /*                 */
    .block-grid.mobile {
      &>li { float: none; width: 100%; margin-#{$defaultFloat}: 0; }
    }

    .block-grid {
      &>li { clear: none; }
      @for $i from 1 through $blockGridElements {
        &.mobile-#{convert-number-to-word($i)}-up>li {
          width: 100%/$i;
          @if $i > 1 { &:nth-child(#{$i}n+1) { clear: both; } }
        }
      }
    }

    /* Forms --- */
    /*           */

    /* Label alignment */
    label.right { text-align: left; }
    /* Extend width of all inputs */
    @for $i from 1 through $totalColumns {
      input[type="text"].#{convert-number-to-word($i)},
      input[type="password"].#{convert-number-to-word($i)},
      input[type="date"].#{convert-number-to-word($i)},
      input[type="datetime"].#{convert-number-to-word($i)},
      input[type="email"].#{convert-number-to-word($i)},
      input[type="number"].#{convert-number-to-word($i)},
      input[type="search"].#{convert-number-to-word($i)},
      input[type="tel"].#{convert-number-to-word($i)},
      input[type="time"].#{convert-number-to-word($i)},
      input[type="url"].#{convert-number-to-word($i)},
      textarea.#{convert-number-to-word($i)} {
        width: 100% !important;
      }
    }

    // /* Typography --- */
    // /*                */

    // Coming Soon

    /* Buttons --- */
    /*             */

    /* Basic overrides */
    .button { display: block; }
    button.button, input[type="submit"].button, input[type="reset"].button { width: 100%; padding-#{$defaultFloat}: 0; padding-#{$defaultOpposite}: 0; }
    /* Button Groups */
    .button-group {
      button.button, input[type="submit"].button { width: auto; padding: $btnBase ($btnBase * 2) ($btnBase + 1);
        &.large  { padding: ($largeBtnBase) ($largeBtnBase * 2) ($largeBtnBase + 1); }
        &.medium { padding: $btnBase ($btnBase * 2) ($btnBase + 1); }
        &.small  { padding: ($smallBtnBase) ($smallBtnBase * 2) ($smallBtnBase + 1); }
        &.tiny   { padding: ($tinyBtnBase) ($tinyBtnBase * 2) ($tinyBtnBase + 1); }
      }
      &.even button.button, &.even input[type="submit"].button { width: 100%; padding-#{$defaultFloat}: 0; padding-#{$defaultOpposite}: 0; }
    }

    /* Clearing --- */
    /*              */
    .clearing-container { margin: 0; }
    .clearing-close { z-index: 99; font-size: ms(4); top: 0px; right: 5px; }
    .clearing-caption { position: fixed; bottom: 0; left: 0; padding: 10px !important; line-height: 1.3; }
    .clearing-main-right, .clearing-main-left { display: none; }
    .clearing-blackout.clearing-assembled {
      .visible-img, .clearing-container { height: 100%; }
      ul[data-clearing] { display: none; }
    }

    /* UI Elements --- */
    /*                 */
    /* Tooltips */
    .tooltip {
      font-size: $tooltipFontSizeScreenSm;
      line-height: 1.4;
      padding: 7px 10px 9px 10px;
      left: 50% !important;
      max-width: 80% !important;
      margin-left: -40%;
      font-size: 110%;
    }
    .tooltip > .nub, .tooltip.top > .nub, .tooltip.left > .nub, .tooltip.right > .nub {
      border-color: transparent transparent $tooltipBackgroundColor transparent;
      border-color: transparent transparent rgba($tooltipBackgroundColor,$tooltipBgOpacityScreenSm) transparent;
      top: -12px;
      left: 10px;
    }
  }


  /* Medium Devices ------------ */
  @media only screen and (max-width: $screenMedium - 1 ) and (min-width: $screenSmall + 1) {
    /* The Grid --- */
    /*              */

    // Creating column for the medium classes
    @for $i from 1 through $totalColumns {
      .medium-#{convert-number-to-word($i)} { width: gridCalc($i, $mediumTotalColumns); }
    }

    @for $i from 1 through $totalColumns - 2 {
      .offset-by-#{convert-number-to-word($i)} { @extend %no-default-margin; }
    }
    @for $i from 2 through $totalColumns - 2 {
      .push-#{convert-number-to-word($i)} { @extend %default-auto; }
      .pull-#{convert-number-to-word($i)} { @extend %opposite-auto; }
    }

    /* medium 6-column Grid */
    @for $i from 1 through $mediumTotalColumns {
      .row {
        .medium-#{convert-number-to-word($i)} { width: gridCalc($i, $mediumTotalColumns) !important; float: $defaultFloat; padding: 0 ($columnGutter/2) ($columnGutter/2) ($columnGutter/2);
          &:last-child { float: $defaultOpposite; }
          &.end { float: $defaultFloat; }
        }
        &.collapse {
          .medium-#{convert-number-to-word($i)} { padding: 0; }
        }
      }
    }
    @for $i from 1 through $mediumTotalColumns - 1 {
      .push-#{convert-number-to-word($i)}-medium { #{$defaultFloat}: gridCalc($i, $mediumTotalColumns); }
      .pull-#{convert-number-to-word($i)}-medium { #{$defaultOpposite}: gridCalc($i, $mediumTotalColumns); }
    }

    /* Block Grids --- */
    /*                 */
    .block-grid.medium {
      &>li { float: none; width: 100%; margin-#{$defaultFloat}: 0; }
    }

    .block-grid {
      &>li { clear: none; }
      @for $i from 1 through $blockGridElements {
        &.medium-#{convert-number-to-word($i)}-up>li {
          width: 100%/$i;
          @if $i > 1 { &:nth-child(#{$i}n+1) { clear: both; } }
        }
      }
    }
  }